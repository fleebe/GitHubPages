digraph {label="Base Class Diagram";
labelloc="t";
"PackageConfig" [shape=none, label=<<TABLE cellspacing="0" cellborder="0" align="left">
<TR><TD align="center" bgcolor="lightyellow"><I>&lt;&lt;interface&gt;&gt;</I><BR/><B>PackageConfig</B></TD></TR>
<TR><TD align="left" BORDER="1" SIDES="T" BALIGN="LEFT"><B>properties</B><BR/>
version: string<BR/>
</TD></TR>
</TABLE>>];

"ProgramOptions" [shape=none, label=<<TABLE cellspacing="0" cellborder="0" align="left">
<TR><TD align="center" bgcolor="lightyellow"><I>&lt;&lt;interface&gt;&gt;</I><BR/><B>ProgramOptions</B></TD></TR>
<TR><TD align="left" BORDER="1" SIDES="T" BALIGN="LEFT"><B>properties</B><BR/>
json: boolean<BR/>
graph: boolean<BR/>
class: boolean<BR/>
jsdoc: boolean<BR/>
output: string<BR/>
jsdocConfig: string<BR/>
tsdocConfig: string<BR/>
tsconfig: string<BR/>
entryPoint: string<BR/>
config: string<BR/>
</TD></TR>
</TABLE>>];

"DependencyGraphGenerator" [shape=none, label=<<TABLE cellspacing="0" cellborder="0" align="left">
<TR><TD align="left" bgcolor="lightblue"><B>DependencyGraphGenerator</B></TD></TR>
<TR><TD BORDER="1" SIDES="T" align="left" BALIGN="LEFT"><B>properties</B><BR/>
<font color='red'>-</font>  baseLoc: string<BR/>
<font color='red'>-</font>  diagramHTML: string<BR/>
<font color='red'>-</font>  graphvizProcessor: GraphvizProcessor<BR/>
<font color='red'>-</font>  indexHTML: string<BR/>
<font color='red'>-</font>  options: ProgramOptions<BR/>
<font color='red'>-</font>  outputDir: string<BR/>
</TD></TR>
<TR><TD BORDER="1" SIDES="T" align="left" BALIGN="LEFT"><B>methods</B><BR/>
<font color='blue'>+</font>  constructor(baseLocInput, options)<BR/>
<font color='blue'>+</font>  generate()<BR/>
<font color='red'>-</font>  createDirGraph(graphName, dirArray, graphGenerator, svgPromises)<BR/>
<font color='red'>-</font>  getModuleArray(stats)<BR/>
<font color='red'>-</font>  getTypeDocOutput()<BR/>
</TD></TR>
</TABLE>>];

"JSDocSourceConfig" [shape=none, label=<<TABLE cellspacing="0" cellborder="0" align="left">
<TR><TD align="center" bgcolor="lightyellow"><I>&lt;&lt;interface&gt;&gt;</I><BR/><B>JSDocSourceConfig</B></TD></TR>
<TR><TD align="left" BORDER="1" SIDES="T" BALIGN="LEFT"><B>properties</B><BR/>
include: array<BR/>
exclude: array<BR/>
includePattern: string<BR/>
excludePattern: string<BR/>
</TD></TR>
</TABLE>>];

"JSDocOptsConfig" [shape=none, label=<<TABLE cellspacing="0" cellborder="0" align="left">
<TR><TD align="center" bgcolor="lightyellow"><I>&lt;&lt;interface&gt;&gt;</I><BR/><B>JSDocOptsConfig</B></TD></TR>
<TR><TD align="left" BORDER="1" SIDES="T" BALIGN="LEFT"><B>properties</B><BR/>
destination: string<BR/>
encoding: string<BR/>
private: boolean<BR/>
recurse: boolean<BR/>
pedantic: boolean<BR/>
readme: string<BR/>
template: string<BR/>
tutorials: string<BR/>
verbose: boolean<BR/>
debug: boolean<BR/>
explain: boolean<BR/>
sourcemap: boolean<BR/>
package: string<BR/>
</TD></TR>
</TABLE>>];

"JSDocConfig" [shape=none, label=<<TABLE cellspacing="0" cellborder="0" align="left">
<TR><TD align="center" bgcolor="lightyellow"><I>&lt;&lt;interface&gt;&gt;</I><BR/><B>JSDocConfig</B></TD></TR>
<TR><TD align="left" BORDER="1" SIDES="T" BALIGN="LEFT"><B>properties</B><BR/>
tags: object<BR/>
source: JSDocSourceConfig<BR/>
sourceType: unknown_type | unknown_type<BR/>
plugins: array<BR/>
recurseDepth: number<BR/>
opts: JSDocOptsConfig<BR/>
markdown: object<BR/>
templates: object<BR/>
</TD></TR>
</TABLE>>];

"GraphvizProcessor" [shape=none, label=<<TABLE cellspacing="0" cellborder="0" align="left">
<TR><TD align="left" bgcolor="lightblue"><B>GraphvizProcessor</B></TD></TR>
<TR><TD BORDER="1" SIDES="T" align="left" BALIGN="LEFT"><B>methods</B><BR/>
<font color='blue'>+</font>  constructor()<BR/>
<font color='blue'>+</font>  generateSvg(dotFilePath, svgFilePath)<BR/>
</TD></TR>
</TABLE>>];

"JsDocGenerator" [shape=none, label=<<TABLE cellspacing="0" cellborder="0" align="left">
<TR><TD align="left" bgcolor="lightblue"><B>JsDocGenerator</B></TD></TR>
<TR><TD BORDER="1" SIDES="T" align="left" BALIGN="LEFT"><B>properties</B><BR/>
<font color='blue'>+</font>  jsDocIndexRelativePath: string | null<BR/>
<font color='red'>-</font>  baseLoc: string<BR/>
<font color='red'>-</font>  defaultJsDocSubDir<BR/>
<font color='red'>-</font>  jsModules: array<BR/>
<font color='red'>-</font>  outputDir: string<BR/>
</TD></TR>
<TR><TD BORDER="1" SIDES="T" align="left" BALIGN="LEFT"><B>methods</B><BR/>
<font color='blue'>+</font>  constructor(baseLoc, outputDir, jsModules)<BR/>
<font color='blue'>+</font>  generateJsDoc(userConfigPath)<BR/>
<font color='blue'>+</font>  generateJsDoc1(userConfigPath)<BR/>
<font color='red'>-</font>  createTempJsdocConfigObject(jsdocOutputDirAbsolute)<BR/>
</TD></TR>
</TABLE>>];

"TypeDocGenerator" [shape=none, label=<<TABLE cellspacing="0" cellborder="0" align="left">
<TR><TD align="left" bgcolor="lightblue"><B>TypeDocGenerator</B></TD></TR>
<TR><TD BORDER="1" SIDES="T" align="left" BALIGN="LEFT"><B>properties</B><BR/>
<font color='red'>-</font>  baseLoc: string<BR/>
<font color='red'>-</font>  defaultTypeDocSubDir<BR/>
<font color='red'>-</font>  outputDir: string<BR/>
<font color='red'>-</font>  tsModules: array<BR/>
<font color='red'>-</font>  typeDocOutputPath: string<BR/>
</TD></TR>
<TR><TD BORDER="1" SIDES="T" align="left" BALIGN="LEFT"><B>methods</B><BR/>
<font color='blue'>+</font>  constructor(tsModules, baseLoc, outputDir, typeDocOutputPath)<BR/>
<font color='blue'>+</font>  generateTypeDoc(options)<BR/>
<font color='blue'>+</font>  generateTypeDocForEachModule(typedocConfig, tsconfigPath)<BR/>
<font color='blue'>+</font>  generateTypeDocForEachModule1(tsModules, typedocConfig, tsconfigPath)<BR/>
<font color='blue'>+</font>  generateTypeDocForModule(module, typedocConfig, tsconfigPath)<BR/>
<font color='red'>-</font>  buildTypeDocArgs(entryPoints, docName, outDir, optionsPath, tsconfigPath)<BR/>
<font color='red'>-</font>  canCompileWithTsc(filePath, tsconfigPath)<BR/>
<font color='red'>-</font>  generateTypeDocAt(tsModules, typedocConfig, entryPoint, tsconfigPath)<BR/>
<font color='red'>-</font>  loadAndResolveTsConfig(tsConfigPath, visited)<BR/>
<font color='red'>-</font>  mergeTsConfig(tsConfigPath)<BR/>
<font color='red'>-</font>  resolveTsConfigPath(baseLoc, typedocConfigPath, tsconfigPath)<BR/>
</TD></TR>
</TABLE>>];

}
