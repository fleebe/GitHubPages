digraph {label="Base Class Diagram";
labelloc="t";
"PackageConfig" [shape=none, label=<<TABLE cellspacing="0" cellborder="0" align="left">
<TR><TD align="center" bgcolor="lightyellow"><I>&lt;&lt;interface&gt;&gt;</I><BR/><B>PackageConfig</B></TD></TR>
<TR><TD align="left"><B>properties</B><BR/>
version: string<BR/>
</TD></TR>
</TABLE>>];

"ProgramOptions" [shape=none, label=<<TABLE cellspacing="0" cellborder="0" align="left">
<TR><TD align="center" bgcolor="lightyellow"><I>&lt;&lt;interface&gt;&gt;</I><BR/><B>ProgramOptions</B></TD></TR>
<TR><TD align="left"><B>properties</B><BR/>
json: boolean<BR/>
graph: boolean<BR/>
class: boolean<BR/>
jsdoc: boolean<BR/>
output: string<BR/>
jsdocConfig: string<BR/>
typedocConfig: string<BR/>
entryPoint: string<BR/>
config: string<BR/>
</TD></TR>
</TABLE>>];

"DggOptions" [shape=none, label=<<TABLE cellspacing="0" cellborder="0" align="left">
<TR><TD align="center" bgcolor="lightyellow"><I>&lt;&lt;interface&gt;&gt;</I><BR/><B>DggOptions</B></TD></TR>
<TR><TD align="left"><B>properties</B><BR/>
json: boolean<BR/>
graph: boolean<BR/>
class: boolean<BR/>
jsdoc: boolean<BR/>
output: string<BR/>
typedocConfig: string<BR/>
jsdocConfig: string<BR/>
ignore: array<BR/>
</TD></TR>
</TABLE>>];

"DependencyGraphGenerator" [shape=none, label=<<TABLE cellspacing="0" cellborder="0" align="left">
<TR><TD align="left" bgcolor="lightblue"><B>DependencyGraphGenerator</B></TD></TR>
<TR><TD align="left"><B>properties</B><BR/>
- baseLoc: string<BR/>
- options: DggOptions<BR/>
- outputDir: string<BR/>
- diagramHTML: string<BR/>
- indexHTML: string<BR/>
- graphvizProcessor: GraphvizProcessor<BR/>
</TD></TR>
<TR><TD align="left"><B>methods</B><BR/>
+ constructor(baseLocInput, options)<BR/>
+ generate()<BR/>
- getModuleArray(stats)<BR/>
- createDirGraph(graphName, dirArray, graphGenerator, svgPromises)<BR/>
</TD></TR>
</TABLE>>];

"JSDocSourceConfig" [shape=none, label=<<TABLE cellspacing="0" cellborder="0" align="left">
<TR><TD align="center" bgcolor="lightyellow"><I>&lt;&lt;interface&gt;&gt;</I><BR/><B>JSDocSourceConfig</B></TD></TR>
<TR><TD align="left"><B>properties</B><BR/>
include: array<BR/>
exclude: array<BR/>
includePattern: string<BR/>
excludePattern: string<BR/>
</TD></TR>
</TABLE>>];

"JSDocOptsConfig" [shape=none, label=<<TABLE cellspacing="0" cellborder="0" align="left">
<TR><TD align="center" bgcolor="lightyellow"><I>&lt;&lt;interface&gt;&gt;</I><BR/><B>JSDocOptsConfig</B></TD></TR>
<TR><TD align="left"><B>properties</B><BR/>
destination: string<BR/>
encoding: string<BR/>
private: boolean<BR/>
recurse: boolean<BR/>
pedantic: boolean<BR/>
readme: string<BR/>
template: string<BR/>
tutorials: string<BR/>
verbose: boolean<BR/>
debug: boolean<BR/>
explain: boolean<BR/>
sourcemap: boolean<BR/>
package: string<BR/>
</TD></TR>
</TABLE>>];

"JSDocConfig" [shape=none, label=<<TABLE cellspacing="0" cellborder="0" align="left">
<TR><TD align="center" bgcolor="lightyellow"><I>&lt;&lt;interface&gt;&gt;</I><BR/><B>JSDocConfig</B></TD></TR>
<TR><TD align="left"><B>properties</B><BR/>
tags: object<BR/>
source: JSDocSourceConfig<BR/>
sourceType: unknown_type | unknown_type<BR/>
plugins: array<BR/>
recurseDepth: number<BR/>
opts: JSDocOptsConfig<BR/>
markdown: object<BR/>
templates: object<BR/>
</TD></TR>
</TABLE>>];

"DocumentationGenerator" [shape=none, label=<<TABLE cellspacing="0" cellborder="0" align="left">
<TR><TD align="left" bgcolor="lightblue"><B>DocumentationGenerator</B></TD></TR>
<TR><TD align="left"><B>properties</B><BR/>
+ outputDir: string<BR/>
+ baseLoc: string<BR/>
+ jsModules: array<BR/>
+ tsModules: array<BR/>
+ typeDocIndexRelativePath: string | null<BR/>
+ jsDocIndexRelativePath: string | null<BR/>
- typeDocGenerator: TypeDocGenerator<BR/>
- jsDocGenerator: JsDocGenerator<BR/>
</TD></TR>
<TR><TD align="left"><B>methods</B><BR/>
+ constructor(baseLocInput, outputDir, moduleArray)<BR/>
+ generateTypeDoc(typedocConfig, tsconfigPath)<BR/>
+ generateTypeDocForEachModule(typedocConfig, tsconfigPath)<BR/>
+ generateJsDoc(userConfigPath)<BR/>
+ spawnDocumentationProcess(command, args, logPrefix, toolDisplayName)<BR/>
</TD></TR>
</TABLE>>];

"GraphvizProcessor" [shape=none, label=<<TABLE cellspacing="0" cellborder="0" align="left">
<TR><TD align="left" bgcolor="lightblue"><B>GraphvizProcessor</B></TD></TR>
<TR><TD align="left"><B>methods</B><BR/>
+ constructor()<BR/>
+ generateSvg(dotFilePath, svgFilePath)<BR/>
</TD></TR>
</TABLE>>];

"JsDocGenerator" [shape=none, label=<<TABLE cellspacing="0" cellborder="0" align="left">
<TR><TD align="left" bgcolor="lightblue"><B>JsDocGenerator</B></TD></TR>
<TR><TD align="left"><B>properties</B><BR/>
- baseLoc: string<BR/>
- outputDir: string<BR/>
- defaultJsDocSubDir<BR/>
- jsModules: array<BR/>
</TD></TR>
<TR><TD align="left"><B>methods</B><BR/>
+ constructor(baseLoc, outputDir, jsModules)<BR/>
- createTempJsdocConfigObject(jsdocOutputDirAbsolute)<BR/>
+ generateJsDoc(userConfigPath)<BR/>
</TD></TR>
</TABLE>>];

"TypeDocGenerator" [shape=none, label=<<TABLE cellspacing="0" cellborder="0" align="left">
<TR><TD align="left" bgcolor="lightblue"><B>TypeDocGenerator</B></TD></TR>
<TR><TD align="left"><B>properties</B><BR/>
- baseLoc: string<BR/>
- outputDir: string<BR/>
- defaultTypeDocSubDir<BR/>
</TD></TR>
<TR><TD align="left"><B>methods</B><BR/>
+ constructor(baseLoc, outputDir)<BR/>
- buildTypeDocArgs(entryPoints, docName, outDir, optionsPath, tsconfigPath)<BR/>
- resolveTsConfigPath(baseLoc, typedocConfigPath, tsconfigPath)<BR/>
- mergeTsConfig(tsConfigPath)<BR/>
- loadAndResolveTsConfig(tsConfigPath, visited)<BR/>
- resolveTypeDocOutputDir(configPath, defaultOut)<BR/>
+ generateTypeDoc(tsModules, typedocConfig, tsconfigPath)<BR/>
+ generateTypeDocForEachModule(tsModules, typedocConfig, tsconfigPath)<BR/>
+ generateTypeDocForModule(module, typedocConfig, tsconfigPath)<BR/>
</TD></TR>
</TABLE>>];

}
